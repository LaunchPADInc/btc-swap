{"version":3,"sources":["src/abi/btcrelay.js"],"names":[],"mappings":"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","file":"src/abi/btcrelay.js","sourcesContent":["module.exports = [{\n    \"name\": \"bulkStoreHeader(bytes,int256)\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"headersBinary\", \"type\": \"bytes\" }, { \"name\": \"count\", \"type\": \"int256\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"computeMerkle(int256,int256,int256[])\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"txHash\", \"type\": \"int256\" }, { \"name\": \"txIndex\", \"type\": \"int256\" }, { \"name\": \"sibling\", \"type\": \"int256[]\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"getAverageBlockDifficulty()\",\n    \"type\": \"function\",\n    \"inputs\": [],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"getBlockchainHead()\",\n    \"type\": \"function\",\n    \"inputs\": [],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"getCumulativeDifficulty()\",\n    \"type\": \"function\",\n    \"inputs\": [],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"getLastBlockHeight()\",\n    \"type\": \"function\",\n    \"inputs\": [],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"inMainChain(int256)\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"txBlockHash\", \"type\": \"int256\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"relayTx(bytes,int256,int256,int256[],int256,int256)\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"txStr\", \"type\": \"bytes\" }, { \"name\": \"txHash\", \"type\": \"int256\" }, { \"name\": \"txIndex\", \"type\": \"int256\" }, { \"name\": \"sibling\", \"type\": \"int256[]\" }, { \"name\": \"txBlockHash\", \"type\": \"int256\" }, { \"name\": \"contract\", \"type\": \"int256\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"storeBlockHeader(bytes)\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"blockHeaderBinary\", \"type\": \"bytes\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n},\n{\n    \"name\": \"verifyTx(int256,int256,int256[],int256)\",\n    \"type\": \"function\",\n    \"inputs\": [{ \"name\": \"txHash\", \"type\": \"int256\" }, { \"name\": \"txIndex\", \"type\": \"int256\" }, { \"name\": \"sibling\", \"type\": \"int256[]\" }, { \"name\": \"txBlockHash\", \"type\": \"int256\" }],\n    \"outputs\": [{ \"name\": \"out\", \"type\": \"int256\" }]\n}];\n"]}